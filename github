1.     Given a string s consisting of words and spaces, return the length of the last word in the string.
       A word is a maximal substring consisting of non-space characters only.

#include <stdio.h>
#include <string.h>

int lengthOfLastWord(const char *s) {
    int count = 0;
    int end = strlen(s) - 1;
    while (end >= 0 && s[end] == ' ') {
        end--;
    }
    for (int i = end; i >= 0; i--) {
        if (s[i] == ' ') {
            break;
        }
        count++;
    }
    return count;
   
}

int main() {
    char input[1000];

   
    printf("Enter a string: ");
    fgets(input, sizeof(input), stdin);

   
    input[strcspn(input, "\n")] = '\0';

    int result = lengthOfLastWord(input);

   
    printf("Length of the last word: %d\n", result);

    return 0;
}




2.   Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.

#include <stdio.h>
#include <stdlib.h>

int* majorityElements(int* nums, int numsSize, int* returnSize) {
    if (nums == NULL || numsSize == 0) {
        *returnSize = 0;
        return NULL;
    }

    int candidate1 = 0, count1 = 0;
    int candidate2 = 0, count2 = 0;

   
    for (int i = 0; i < numsSize; i++) {
        if (candidate1 == nums[i]) {
            count1++;
        } else if (candidate2 == nums[i]) {
            count2++;
        } else if (count1 == 0) {
            candidate1 = nums[i];
            count1 = 1;
        } else if (count2 == 0) {
            candidate2 = nums[i];
            count2 = 1;
        } else {
            count1--;
            count2--;
        }
    }

   
    count1 = count2 = 0;
    for (int i = 0; i < numsSize; i++) {
        if (nums[i] == candidate1) {
            count1++;
        } else if (nums[i] == candidate2) {
            count2++;
        }
    }


    *returnSize = 0;
    int* result = (int*)malloc(sizeof(int) * 2);

    if (count1 > numsSize / 3) {
        result[(*returnSize)++] = candidate1;
    }
    if (count2 > numsSize / 3 && candidate1 != candidate2) {
        result[(*returnSize)++] = candidate2;
    }

    return result;
}

int main() {
   
    int nums1[] = {3, 2, 3};
    int numsSize1 = sizeof(nums1) / sizeof(nums1[0]);
    int returnSize1;
    int* result1 = majorityElements(nums1, numsSize1, &returnSize1);
    printf("Example 1 Output: [");
    for (int i = 0; i < returnSize1; i++) {
        printf("%d ", result1[i]);
    }
    printf("]\n");
    free(result1);

   
    int nums2[] = {1};
    int numsSize2 = sizeof(nums2) / sizeof(nums2[0]);
    int returnSize2;
    int* result2 = majorityElements(nums2, numsSize2, &returnSize2);
    printf("Example 2 Output: [");
    for (int i = 0; i < returnSize2; i++) {
        printf("%d ", result2[i]);
    }
    printf("]\n");
    free(result2);

   
    int nums3[] = {1, 2};
    int numsSize3 = sizeof(nums3) / sizeof(nums3[0]);
    int returnSize3;
    int* result3 = majorityElements(nums3, numsSize3, &returnSize3);
    printf("Example 3 Output: [");
    for (int i = 0; i < returnSize3; i++) {
        printf("%d ", result3[i]);
    }
    printf("]\n");
    free(result3);

    return 0;
}






3. Given an integer n, count the total number of digit 1 appearing in all non-negative integers less than or equal to n.    


#include <stdio.h>

int countDigitOne(int n) {
    int count = 0;
    long long factor = 1;

    while (n / factor > 0) {
        int currentDigit = (n / factor) % 10;
        int before = n / (factor * 10);
        int after = n % factor;

        if (currentDigit > 1) {
            count += (before + 1) * factor;
        } else if (currentDigit == 1) {
            count += before * factor + after + 1;
        } else {
            count += before * factor;
        }

        factor *= 10;
    }

    return count;
}

int main() {
    // Example 1
    int n1 = 13;
    int result1 = countDigitOne(n1);
    printf("Example 1 Output: %d\n", result1);

    // Example 2
    int n2 = 0;
    int result2 = countDigitOne(n2);
    printf("Example 2 Output: %d\n", result2);

    return 0;
}
